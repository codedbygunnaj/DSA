**what is this manhattam distance?**

Great question, understanding Manhattan Distance will help you not just in this problem, but also in grid-based logic, pathfinding, and competitive programming.

📌 Definition:
#Manhattan Distance is the total number of steps needed to go from one point to another if you can only move in 4 directions — up, down, left, right — like how you'd move in a city with square blocks (like Manhattan in New York, hence the name).

It is calculated as:

**Manhattan Distance = |x1 - x2| + |y1 - y2|**

🧠 In Your Case:
You are working with a 5x5 grid.
Let's say the non-zero number is at (1, 4)
And you want to bring it to the center (2, 2)

So,

Horizontal distance: |4 - 2| = 2

Vertical distance: |1 - 2| = 1

Total moves = 2 + 1 = 3

🤖 Visual Example:

Matrix: 
0 0 0 0 0
0 0 0 0 1
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0

Matrix Index Grid:
(0,0) (0,1) (0,2) (0,3) (0,4)
(1,0) (1,1) (1,2) (1,3) (1,4) ← Start
(2,0) (2,1) (2,2) (2,3) (2,4) ← Target Center
(3,0) ...
(4,0) ...

To go from (1,4) → (2,2):
  Step down to row 2
  Step left to col 3
  Step left to col 2
  → Total 3 steps, all legal moves (up/down/left/right), no diagonals.

#include <iostream>
#include <string>
#include <cmath>
using namespace std;

int main() {
    string s[5];
    int row, col;

    for (int i = 0; i < 5; ++i) {
        cin >> s[i];
        for (int j = 0; j < 5; ++j) {
            if (s[i][j] != '0') {
                row = i;
                col = j;
            }
        }
    }

    int countMe = abs(row - 2) + abs(col - 2);
    cout << countMe << endl;

    return 0;
}
